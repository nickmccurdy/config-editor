{"version":3,"sources":["CatalogMenu.tsx","PropertyControl.tsx","Property.tsx","SchemaEditor.tsx","serviceWorker.ts","index.tsx","App.tsx"],"names":["CatalogMenu","schemas","catalog","map","schema","name","key","to","PropertyControl","defaultValue","default","type","Array","isArray","currentType","defaultChecked","Property","nameProp","SchemaEditor","useState","setSchema","useEffect","a","matchingSchema","find","currentSchema","fetch","url","response","resolveAllOf","$RefParser","json","dereference","console","error","fetchSchema","title","Object","entries","properties","property","Boolean","window","location","hostname","match","ReactDOM","render","setCatalog","fetchCatalog","history","createHistory","createHashSource","path","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uQAgBe,SAASA,EAAT,GAEiC,IADnCC,EACkC,EAD7CC,QAAWD,QAEX,OACE,4BACGA,EAAQE,IAAI,gBAASC,EAAT,EAAGC,KAAH,OACX,wBAAIC,IAAKF,GACP,kBAAC,IAAD,CAAMG,GAAE,WAAMH,IAAWA,O,8CCpBpB,SAASI,EAAT,GAGC,IAFLC,EAEI,EAFbC,QACAC,EACa,EADbA,KAEA,GAAIC,MAAMC,QAAQF,GAChB,OACE,4BACGA,EAAKR,IAAI,SAAAW,GAAW,OACnB,wBAAIR,IAAKQ,GACP,kBAACN,EAAD,CAAiBE,QAASD,EAAcE,KAAMG,QAOxD,OAAQH,GACN,IAAK,SACH,OAAO,2BAAOF,aAAcA,IAC9B,IAAK,SACL,IAAK,UACH,OAAO,2BAAOE,KAAK,SAASF,aAAcA,IAC5C,IAAK,UACH,OAAO,2BAAOE,KAAK,WAAWI,eAAgBN,IAChD,IAAK,SACH,OACE,oCACE,gCADF,KACa,gCACX,6BACA,wCAGN,IAAK,QACH,OACE,oCACE,gCACA,6BACA,wCAGN,QACE,OAAO,MCxCE,SAASO,EAAT,GAGoB,IAF3BC,EAE0B,EAFhCZ,KACGD,EAC6B,wBAChC,OACE,6BACE,+BACGa,EACD,6BACA,kBAACT,EAAoBJ,KCNd,SAASc,EAAT,GAGmD,IAFhEhB,EAE+D,EAF/DA,QACMe,EACyD,EAD/DZ,KAC+D,EACnCc,qBADmC,mBACxDf,EADwD,KAChDgB,EADgD,KAwB/D,OArBAC,oBAAU,WAAM,2CACd,8BAAAC,EAAA,mEAEUC,EAAiBrB,EAAQD,QAAQuB,KACrC,SAAAC,GAAa,OAAIA,EAAcpB,OAASY,KAH9C,iCAO6BS,MAAMH,EAAeI,KAPlD,cAOYC,EAPZ,YAQMR,EARN,KASQS,IATR,KAS2BC,IAT3B,UASwDF,EAASG,OATjE,0CASsCC,YATtC,iIAaIC,QAAQC,MAAR,MAbJ,yDADc,uBAAC,WAAD,wBAkBdC,IACC,CAACjC,EAASe,IAETb,EAEA,oCACE,4BAAKA,EAAOgC,OACXC,OAAOC,QAAQlC,EAAOmC,YAAc,IAAIpC,IACvC,mCAAEqC,EAAF,KAAYf,EAAZ,YACE,kBAACT,EAAD,eAAUV,IAAKkC,EAAUnC,KAAMmC,GAAcf,OAOhD,KCnCWgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBCMD,WAAgB,IAAD,EACE5B,qBADF,mBACrBjB,EADqB,KACZ8C,EADY,KAkB5B,OAfA3B,oBAAU,WAAM,2CACd,4BAAAC,EAAA,8EAE2BI,MACrB,gDAHN,cAEUE,EAFV,YAKIoB,EALJ,SAKqBpB,EAASG,OAL9B,oFAOIE,QAAQC,MAAR,MAPJ,yDADc,uBAAC,WAAD,wBAYde,IACC,IAEC/C,EAEA,kBAAC,IAAD,CACEgD,QAASC,YAAcC,QAEvB,kBAAC,IAAD,KACE,kBAACpD,EAAD,CAAaqD,KAAK,IAAInD,QAASA,IAC/B,kBAACgB,EAAD,CAAcmC,KAAK,QAAQnD,QAASA,MAMrC,MDrCO,MAASoD,SAASC,eAAe,SDoI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gB","file":"static/js/main.d06b5340.chunk.js","sourcesContent":["import { Link, RouteComponentProps } from \"@reach/router\";\nimport React from \"react\";\n\nexport interface Catalog {\n  version: number;\n  schemas: SchemaReference[];\n}\n\nexport interface SchemaReference {\n  filematch?: string[];\n  url: string;\n  name: string;\n  description: string;\n  versions?: Record<string, string>;\n}\n\nexport default function CatalogMenu({\n  catalog: { schemas }\n}: { catalog: Catalog } & RouteComponentProps) {\n  return (\n    <ul>\n      {schemas.map(({ name: schema }) => (\n        <li key={schema}>\n          <Link to={`/${schema}`}>{schema}</Link>\n        </li>\n      ))}\n    </ul>\n  );\n}\n","import { JSONSchema } from \"json-schema-ref-parser\";\nimport React from \"react\";\n\nexport default function PropertyControl({\n  default: defaultValue,\n  type\n}: JSONSchema) {\n  if (Array.isArray(type)) {\n    return (\n      <ul>\n        {type.map(currentType => (\n          <li key={currentType}>\n            <PropertyControl default={defaultValue} type={currentType} />\n          </li>\n        ))}\n      </ul>\n    );\n  }\n\n  switch (type) {\n    case \"string\":\n      return <input defaultValue={defaultValue as string} />;\n    case \"number\":\n    case \"integer\":\n      return <input type=\"number\" defaultValue={defaultValue as string} />;\n    case \"boolean\":\n      return <input type=\"checkbox\" defaultChecked={defaultValue as boolean} />;\n    case \"object\":\n      return (\n        <>\n          <input />: <input />\n          <br />\n          <button>Add</button>\n        </>\n      );\n    case \"array\":\n      return (\n        <>\n          <input />\n          <br />\n          <button>Add</button>\n        </>\n      );\n    default:\n      return null;\n  }\n}\n","import { JSONSchema } from \"json-schema-ref-parser\";\nimport React from \"react\";\nimport PropertyControl from \"./PropertyControl\";\n\nexport default function Property({\n  name: nameProp,\n  ...schema\n}: { name: string } & JSONSchema) {\n  return (\n    <div>\n      <label>\n        {nameProp}\n        <br />\n        <PropertyControl {...schema} />\n      </label>\n    </div>\n  );\n}\n","import { RouteComponentProps } from \"@reach/router\";\nimport $RefParser, { JSONSchema } from \"json-schema-ref-parser\";\nimport resolveAllOf from \"json-schema-resolve-allof\";\nimport React, { useEffect, useState } from \"react\";\nimport { Catalog } from \"./CatalogMenu\";\nimport Property from \"./Property\";\n\nexport default function SchemaEditor({\n  catalog,\n  name: nameProp\n}: { catalog: Catalog } & RouteComponentProps<{ name: string }>) {\n  const [schema, setSchema] = useState<JSONSchema>();\n\n  useEffect(() => {\n    async function fetchSchema() {\n      try {\n        const matchingSchema = catalog.schemas.find(\n          currentSchema => currentSchema.name === nameProp\n        );\n\n        if (matchingSchema) {\n          const response = await fetch(matchingSchema.url);\n          setSchema(\n            resolveAllOf(await $RefParser.dereference(await response.json()))\n          );\n        }\n      } catch (error) {\n        console.error(error);\n      }\n    }\n\n    fetchSchema();\n  }, [catalog, nameProp]);\n\n  if (schema) {\n    return (\n      <>\n        <h1>{schema.title}</h1>\n        {Object.entries(schema.properties || []).map(\n          ([property, currentSchema]: [string, JSONSchema]) => (\n            <Property key={property} name={property} {...currentSchema} />\n          )\n        )}\n      </>\n    );\n  }\n\n  return null;\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n/*\n * If you want your app to work offline and load faster, you can change\n * unregister() to register() below. Note this comes with some pitfalls.\n * Learn more about service workers: https://bit.ly/CRA-PWA\n */\nserviceWorker.unregister();\n","import {\n  createHistory,\n  HistorySource,\n  LocationProvider,\n  Router\n} from \"@reach/router\";\nimport createHashSource from \"hash-source\";\nimport React, { useEffect, useState } from \"react\";\nimport CatalogMenu, { Catalog } from \"./CatalogMenu\";\nimport SchemaEditor from \"./SchemaEditor\";\n\nexport default function App() {\n  const [catalog, setCatalog] = useState<Catalog>();\n\n  useEffect(() => {\n    async function fetchCatalog() {\n      try {\n        const response = await fetch(\n          \"http://schemastore.org/api/json/catalog.json\"\n        );\n        setCatalog(await response.json());\n      } catch (error) {\n        console.error(error);\n      }\n    }\n\n    fetchCatalog();\n  }, []);\n\n  if (catalog) {\n    return (\n      <LocationProvider\n        history={createHistory(createHashSource() as HistorySource)}\n      >\n        <Router>\n          <CatalogMenu path=\"/\" catalog={catalog} />\n          <SchemaEditor path=\":name\" catalog={catalog} />\n        </Router>\n      </LocationProvider>\n    );\n  }\n\n  return null;\n}\n"],"sourceRoot":""}